#!/usr/bin/env python3
"""
DialoGPT FastAPI —Å–µ—Ä–≤–µ—Ä –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é main.py –ª–æ–≥—ñ–∫–∏
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
import os
import sys

# Add DialoGPT path
sys.path.append(os.path.join(os.path.dirname(__file__), 'DialoGPT'))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI(
    title="DialoGPT Chat API",
    description="API –¥–ª—è —á–∞—Ç—É –∑ DialoGPT –±–æ—Ç–æ–º",
    version="1.0.0"
)

# Initialize templates with absolute path
template_dir = os.path.join(os.path.dirname(__file__), "template")
templates = Jinja2Templates(directory=template_dir)
print(f"‚úÖ Templates loaded from: {template_dir}")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
"""
Attempt to import DialoGPT components. Keep API resilient if some pieces are missing.
"""
try:
    from DialoGPT.interface.generator import generate_response  # type: ignore
except Exception as e:
    print(f"‚ö†Ô∏è DialoGPT.generator unavailable: {e}")
    generate_response = None  # type: ignore

try:
    from DialoGPT.utils.validator import (  # type: ignore
        validate_response_quality,
        validate_triton_connection,
        validate_prompt as _validate_prompt_impl,
    )
except Exception as e:
    print(f"‚ö†Ô∏è DialoGPT.utils.validator unavailable: {e}")
    validate_response_quality = None  # type: ignore
    validate_triton_connection = None  # type: ignore
    _validate_prompt_impl = None  # type: ignore

DIALOGPT_AVAILABLE = generate_response is not None
if DIALOGPT_AVAILABLE:
    print("‚úÖ DialoGPT components loaded (generator)")
else:
    print("‚ö†Ô∏è DialoGPT generator not available; will use fallback responses")

def safe_validate_prompt(prompt: str):
    """Local safe wrapper around validate_prompt to avoid NameError.

    Returns dict with at least {"valid": bool}.
    If validator is unavailable, treat non-empty input as valid.
    """
    try:
        if _validate_prompt_impl:
            return _validate_prompt_impl(prompt)
    except Exception as e:
        print(f"‚ö†Ô∏è validate_prompt error: {e}")
    # Fallback logic: basic checks
    if not isinstance(prompt, str) or not prompt.strip():
        return {"valid": False, "issue": "Empty or invalid prompt"}
    if len(prompt) > 500:
        return {"valid": False, "issue": "Prompt too long (>500 chars)"}
    return {"valid": True}

# Fallback responses for when DialoGPT is not available
FALLBACK_RESPONSES = [
    "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
    "–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –†–æ–∑–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à–µ.",
    "–Ø —Å–ª—É—Ö–∞—é –≤–∞—Å.",
    "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
    "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ!",
    "–Ø–∫ –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?"
]

# Pydantic models
class ChatRequest(BaseModel):
    message: str
    use_smart_fallback: bool = True

class ChatResponse(BaseModel):
    response: str
    source: str
    quality: bool
    intent: str = None


def generate_response_simple(prompt):
    """
    –°–ø—Ä–æ—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂: (response: str, source: str, quality: bool, intent: str)
    """
    try:
        # –í–∞–ª—ñ–¥—É—î–º–æ –ø—Ä–æ–º–ø—Ç (safe wrapper)
        prompt_validation = safe_validate_prompt(prompt)
        if not prompt_validation['valid']:
            import random
            fb = random.choice(FALLBACK_RESPONSES)
            return fb, "fallback", True, "chat"

        # –Ø–∫—â–æ DialoGPT –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
        if DIALOGPT_AVAILABLE and generate_response:
            response = generate_response(prompt)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            response_validation = (
                validate_response_quality(response)
                if callable(validate_response_quality) else {"valid": True}
            )
            if response_validation.get('valid'):
                return response, "dialogpt", True, "chat"
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ—è–∫—ñ—Å–Ω–∞ ‚Äî —Ñ–æ–ª–±–µ–∫
            import random
            fb = random.choice(FALLBACK_RESPONSES)
            return fb, "fallback", True, "chat"

        # –Ø–∫—â–æ DialoGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî —Ñ–æ–ª–±–µ–∫
        import random
        fb = random.choice(FALLBACK_RESPONSES)
        return fb, "fallback", True, "chat"

    except Exception as e:
        print(f"‚ùå Error in generate_response_simple: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", "error", False, "error"


@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """Serve the main chat page"""
    return templates.TemplateResponse("chat.html", {"request": request})

@app.get("/chat", response_class=HTMLResponse)
async def chat_page(request: Request):
    """Serve the chat page (same as root)"""
    return templates.TemplateResponse("chat.html", {"request": request})

@app.get("/health")
async def health_check():
    """Simple health/status endpoint for the UI"""
    return {
        "status": "ok",
        "dialogpt_chat": "available" if DIALOGPT_AVAILABLE else "unavailable"
    }

@app.post("/predict", response_model=ChatResponse)
async def chat_predict(request: ChatRequest):
    """DialoGPT chat endpoint"""
    
    try:
        message = (request.message or "").strip()
        if not message:
            raise ValueError("Empty message")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (+ –¥–∂–µ—Ä–µ–ª–æ)
        response, source, quality, intent = generate_response_simple(message)

        print(f"‚úÖ Chat response: '{response}' (source: {source})")

        return ChatResponse(
            response=response,
            source=source,
            quality=quality,
            intent=intent
        )
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return ChatResponse(
            response="–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞.",
            source="error",
            quality=False,
            intent="error"
        )


# Add test call to generate_response for diagnostics
try:
    test_prompt = "Hello, how are you?"
    if callable(generate_response):
        test_response = generate_response(test_prompt, max_new_tokens=25)
        print(f"üîç Test generate_response: {test_response}")
    else:
        print("‚ÑπÔ∏è Skipping test generate_response (generator unavailable)")
except Exception as e:
    print(f"‚ùå Test generate_response failed: {e}")


# Add optional diagnostics (controlled by CHAT_API_DEBUG env var)
import os
DEBUG = os.getenv("CHAT_API_DEBUG", "").lower() in {"1", "true", "yes", "on"}
if DEBUG:
    # Avoid printing full sys.path by default; keep minimal checks
    print("üîç DialoGPT exists:", os.path.exists(os.path.join(os.path.dirname(__file__), 'DialoGPT')))
    print("üîç utils/validator.py exists:", os.path.exists(os.path.join(os.path.dirname(__file__), 'DialoGPT', 'utils', 'validator.py')))

# Additional diagnostic to check validator availability (debug only)
if DEBUG:
    print(f"üîç validator.impl available: {bool('_validate_prompt_impl' in globals() and _validate_prompt_impl)}")
    print(f"üîç using safe_validate_prompt: {callable(safe_validate_prompt)}")

# To start the server, run:
# python -m uvicorn chat_api:app --reload --port 4000